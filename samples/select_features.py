from geosoup import Handler, Vector
import numpy as np


zones = {'alaska': [[-141.81224795379737, 59.34415563214439], [-140.75756045379737, 59.47833079264573],
                    [-140.58177920379737, 65.57644264868864], [140.49388857879737, 69.86216688013232],
                    [-143.74584170379737, 70.48807944197019], [-145.41576357879737, 70.31117911740044],
                    [-149.72240420379737, 70.89492453204657], [-150.68920107879737, 70.83730758175096],
                    [-156.75365420379737, 71.48991372814758], [-159.91771670379737, 71.12372869906739],
                    [-162.11498232879737, 70.54670608315655], [-164.57591982879737, 69.92259771309236],
                    [-167.65209170379737, 68.83956563903533], [-166.33373232879737, 67.93322063666452],
                    [-167.47631045379737, 66.64408230794], [-168.88256045379737, 65.97313432689623],
                    [-167.56420107879737, 64.80200458528384], [-166.07006045379737, 63.927511045277946],
                    [-166.77318545379737, 62.175540845276196], [-167.47631045379737, 60.96221624362037],
                    [-166.68529482879737, 59.433664790789585], [-164.66381045379737, 58.6652692856427],
                    [-158.86302920379737, 57.78598275088192], [-162.37865420379737, 56.40148502459645],
                    [-165.10326357879737, 55.16605121601156], [-164.48802920379737, 53.73543849849637],
                    [-159.65404482879737, 54.5590508015143], [-155.08373232879737, 56.05950778540713],
                    [-152.44701357879737, 56.64388932784722], [-150.86498232879737, 57.97290888646238],
                    [-149.89818545379737, 59.07420727348277], [-147.26146670379737, 59.611975098340594],
                    [-145.50365420379737, 59.83353967060882], [-141.81224795379737, 59.34415563214439]],
         'west_canada': [[-140.91735216263692, 59.31467186851417], [-135.38024278763692, 55.408412833710855],
                         [-129.49157091263692, 50.26614377830783], [-124.92125841263692, 48.24440343020581],
                         [-123.38317247513692, 48.14187132337822], [-122.98836981542819, 48.29531610352436],
                         [-123.03160997513692, 48.550769345977045], [-122.63610216263692, 48.970815498533064],
                         [-120.19713731888692, 48.91308689524182], [-118.24157091263692, 48.98523721663422],
                         [-116.61559435013692, 48.98523721663422], [-114.28649278763692, 48.9275253062809],
                         [-112.19909044388692, 48.91308689524182], [-108.59557481888692, 48.91308689524182],
                         [-105.76110216263692, 48.9275253062809], [-101.19078966263692, 48.869746617204164],
                         [-95.08239122513692, 48.855291508592394], [-95.12633653763692, 52.873746978115896],
                         [-93.78600450638692, 53.6361462936159], [-91.87438341263692, 55.01981155807091],
                         [-88.88610216263692, 56.925171556191216], [-88.64440294388692, 57.42541306551418],
                         [-86.91777198353255, 59.86477899311762], [-81.16093604603255, 62.61163403197734],
                         [-80.45901952925338, 63.48763288638626], [-79.62285010853255, 63.81943845479094],
                         [-79.40312354603255, 63.97412187264472], [-79.75468604603255, 64.24277341119883],
                         [-79.79863135853255, 64.33809278326109], [-79.79863135853255, 64.41411141604625],
                         [-80.19413917103255, 64.4899199874708], [-80.32597510853255, 64.603239959868],
                         [-80.76542823353255, 65.8190655190608], [-80.67753760853255, 66.66872681846789],
                         [-80.32597510853255, 67.59087716283096], [-80.15019385853255, 68.41381023820576],
                         [-80.67753760853255, 69.20791609318233], [-82.96269385853255, 69.76230709624636],
                         [-85.07206885853255, 69.94393779894507], [-87.62089698353255, 69.42521759248332],
                         [-89.46660010853255, 69.97405725369609], [-91.40019385853255, 70.74209542268574],
                         [-93.24589698353255, 71.89593565468488], [-94.25970673679434, 71.99917994116754],
                         [-94.52469280240378, 72.00513765620813], [-94.73093992001156, 71.99933306138723],
                         [-95.31331302725873, 71.96288338329086], [-95.97050635853255, 71.84123299990166],
                         [-97.25170107879737, 71.0952731889116], [-98.74584170379737, 70.31117911740044],
                         [-100.41576357879737, 69.21703546501531], [-102.08568545379737, 68.3260893230144],
                         [-104.01927920379737, 68.52001892600065], [-106.30443545379737, 69.1545736544415],
                         [-107.18334170379737, 68.90292857194098], [-110.34740420379737, 68.3260893230144],
                         [-112.80834170379737, 68.1958782044063], [-114.56615420379737, 69.09193249989909],
                         [-115.79662295379737, 69.09193249989909], [-117.81810732879737, 69.34142281163523],
                         [-122.38841982879737, 70.13273915373209], [-125.99193545379737, 70.60516337303466],
                         [-128.58877772614355, 70.81370182769776], [-128.80443545379737, 70.48807944197019],
                         [-132.40795107879737, 70.28154635706663], [-135.48412295379737, 70.07291501067633],
                         [-137.84618350067237, 69.7065161779852], [-140.74657412567237, 69.91882588473611],
                         [-140.91735216263692, 59.31467186851417]],
         'east_canada': [[-95.55670014881503, 48.93089566113321], [-92.65630952381503, 47.67399307631944],
                         [-89.00884858631503, 47.76268906305173], [-85.58111421131503, 46.77872073064346],
                         [-83.73541108631503, 42.33550989082346], [-83.47173921131503, 41.4852343219106],
                         [-81.27447358631503, 41.35341815287885], [-76.90191499256503, 43.286508623031416],
                         [-74.85845796131503, 44.52128849402885], [-71.12310639881503, 44.75580880991036],
                         [-67.78326264881503, 43.970388695434735], [-65.49810639881503, 43.25451091482098],
                         [-63.47662202381503, 44.08098138106497], [-60.42242280506503, 45.14456946970965],
                         [-57.98345796131503, 45.91419166983382], [-54.27007905506503, 46.37091137066101],
                         [-53.14947358631503, 46.34058125452793], [-52.13873139881503, 46.59785073444707],
                         [-51.94097749256503, 47.939628170889605], [-52.49029389881503, 48.9597580137736],
                         [-54.05035249256503, 51.14601920798775], [-55.39068452381503, 54.13131022770864],
                         [-58.75250093006503, 55.49854291416385], [-60.09283296131503, 56.3966568361014],
                         [-63.41070405506503, 60.506817593609526], [-64.39947358631503, 60.925965169111855],
                         [-68.35455171131503, 61.21295265307266], [-70.50787202381503, 61.50783117252877],
                         [-72.57330171131503, 62.47762961149456], [-74.11138764881503, 62.73038904498699],
                         [-75.91314546131503, 62.88101433504212], [-78.59380952381503, 62.840922924725525],
                         [-81.49420014881503, 62.619439928637746], [-86.98736421131503, 59.96140805121276],
                         [-89.07476655506503, 56.963924691845975], [-95.22711030506503, 52.92985541153749],
                         [-95.55670014881503, 48.93089566113321]],
         'west': [[-167.75726019613148, 62.59728170249722], [-167.05413519613148, 58.95442413064989],
                  [-164.24163519613148, 56.901679752117644], [-165.64788519613148, 55.03292936783348],
                  [-165.67645852961078, 54.159965630467745], [-161.34124457113148, 53.753773465821105],
                  [-152.11272894613148, 56.17478943590586], [-145.78460394613148, 59.40472324801146],
                  [-137.25921332113148, 56.8055661692509], [-133.56780707113148, 52.9670320664505],
                  [-129.87640082113148, 49.84350423775806], [-126.09710394613148, 47.8778869600881],
                  [-123.98772894613148, 47.40414450433974], [-121.70257269613148, 48.580454599500555],
                  [-113.88030707113148, 48.696612051125314], [-107.46429144613148, 48.3473369374131],
                  [-100.9403010501562, 48.48459423380439], [-97.44476019613148, 47.93680280542927],
                  [-95.07171332113148, 48.23037646229644], [-94.98382269613148, 52.96703206645047],
                  [-82.41546332113148, 60.20041110104489], [-79.69085394613148, 64.05672436438738],
                  [-79.42718207113148, 66.93341510287705], [-80.13030707113148, 69.22803359077628],
                  [-81.97601019613148, 69.8425726342611], [-86.19476019613148, 69.93323814648811],
                  [-90.94085394613148, 69.93323814648811], [-94.63226019613148, 69.25918161538168],
                  [-97.44476019613148, 70.17310495941345], [-99.72991644613148, 69.62949073467634],
                  [-100.96038519613148, 68.94568297080906], [-102.98186957113148, 68.56351307089624],
                  [-104.98619409898562, 68.87563728133154], [-106.67327582113148, 68.97723533508875],
                  [-109.92522894613148, 68.49917856002591], [-113.26507269613148, 68.2399970466773],
                  [-114.67132269613148, 69.10299387555943], [-123.10882269613148, 69.93323814648811],
                  [-130.66741644613148, 71.0197446925806], [-142.53265082113148, 71.04830971749956],
                  [-151.05804144613148, 71.49975390444668], [-155.80413519613148, 71.63869018846437],
                  [-163.36272894613148, 71.21883204950878], [-167.65168427593562, 68.75513537154174],
                  [-168.10882269613148, 64.70276437212605], [-167.75726019613148, 62.59728170249722]]}


def intersecting(zone_id,
                 pt_wkt):
    """
    Method to check if a point lies inside a zone
    :param zone_id: Name of zone (alaska, west_canada, east_canada)
    :param pt_wkt: wkt geometry of point
    :return: boolean
    """
    zone_wkt = Vector.wkt_from_coords(zones.get(zone_id),
                                      geom_type='polygon')

    zone_geom = Vector.get_osgeo_geom(zone_wkt)
    pt_geom = Vector.get_osgeo_geom(pt_wkt)

    if zone_geom.Intersects(pt_geom):
        return True
    else:
        return False


if __name__ == '__main__':

    nodata = -9999
    same_val_count = 5

    zone = 'west'

    infile = "D:/Shared/Dropbox/projects/NAU/landsat_deciduous/data/samples/" \
             "decid_pre_v1_tile_extracted_v3_west_boreal_samp_uniform_dist85.csv"
    # infile = "D:/Shared/Dropbox/projects/NAU/landsat_deciduous/data/samples/hansen_tc_mosaic_2010_samp4_full.csv"
    # infile = "D:/Shared/Dropbox/projects/NAU/landsat_deciduous/data/samples/tree_cover/out_tc_2010_samp_v1.csv"

    outfile = "D:/Shared/Dropbox/projects/NAU/landsat_deciduous/data/samples/"\
              "decid_pre_v1_tile_extracted_v3_west_boreal_samp_uniform_dist85_useful_feat.csv"
    # outfile = "D:/Shared/Dropbox/projects/NAU/landsat_deciduous/data/samples/" \
    #           "tree_cover/out_tc_2010_samp_v1_useful_{}.csv".format(zone)
    # outfile = "D:/Shared/Dropbox/projects/NAU/landsat_deciduous/data/samples/"\
    #          "hansen_tc_mosaic_2010_samp4_samp_tc_all_{}.csv".format(zone)

    all_attr = ['blue_1', 'green_1', 'red_1', 'nir_1', 'swir1_1', 'swir2_1', 'ndvi_1', 'ndwi_1',
                'nbr_1', 'vari_1', 'savi_1', 'blue_2', 'green_2', 'red_2', 'nir_2', 'swir1_2', 'swir2_2',
                'ndvi_2', 'ndwi_2', 'nbr_2', 'vari_2', 'savi_2', 'blue_3', 'green_3', 'red_3', 'nir_3',
                'swir1_3', 'swir2_3', 'ndvi_3', 'ndwi_3', 'nbr_3', 'vari_3', 'savi_3', 'elevation', 'slope',
                'aspect']

    main_attr = ['decid_frac']
    useful_attr = ['blue_1', 'green_1', 'red_1', 'nir_1', 'swir1_1', 'ndvi_1', 'nbr_1',
                   'vari_1', 'savi_1', 'blue_2', 'green_2', 'red_2', 'nir_2', 'swir1_2', 'swir2_2',
                   'ndvi_2', 'ndwi_2', 'nbr_2', 'vari_2', 'savi_2', 'blue_3', 'green_3', 'red_3', 'nir_3',
                   'swir1_3', 'swir2_3', 'ndvi_3', 'ndwi_3', 'nbr_3', 'vari_3', 'elevation', 'slope',
                   'aspect']
    '''
    swir2_1 -- swir1_1 : Rsq = 0.9751501083374023 ; P Val = 0.0
    nbr_1 -- ndwi_1 : Rsq = 0.981894314289093 ; P Val = 0.0
    savi_3 -- savi_1 : Rsq = 0.9545788168907166 ; P Val = 0.0
    '''
    '''
    main_attr = ['tree_cover']    
    useful_attr = ['nir_1', 'swir2_1', 'ndvi_1', 'nbr_1', 'vari_1', 'savi_1',
                   'red_2', 'nir_2', 'swir1_2', 'swir2_2',
                   'ndvi_2', 'ndwi_2', 'nbr_2', 'vari_2', 'savi_2', 'red_3', 'nir_3',
                   'swir1_3', 'ndvi_3', 'ndwi_3', 'nbr_3', 'vari_3', 'savi_3', 'elevation', 'slope',
                   'aspect']
    '''


    '''
    green_1 -- blue_1 : Rsq = 0.9989047646522522 ; P Val = 0.0
    red_1 -- blue_1 : Rsq = 0.9981098771095276 ; P Val = 0.0
    red_1 -- green_1 : Rsq = 0.9988898038864136 ; P Val = 0.0
    nir_1 -- blue_1 : Rsq = 0.9783962368965149 ; P Val = 0.0
    nir_1 -- green_1 : Rsq = 0.9822119474411011 ; P Val = 0.0
    nir_1 -- red_1 : Rsq = 0.9817669987678528 ; P Val = 0.0
    swir2_1 -- blue_1 : Rsq = 0.9781153798103333 ; P Val = 0.0
    swir2_1 -- green_1 : Rsq = 0.9794085025787354 ; P Val = 0.0
    swir2_1 -- red_1 : Rsq = 0.9831260442733765 ; P Val = 0.0
    swir2_1 -- swir1_1 : Rsq = 0.9951689839363098 ; P Val = 0.0
    nbr_1 -- ndwi_1 : Rsq = 0.9764316082000732 ; P Val = 0.0
    green_2 -- blue_2 : Rsq = 0.9888408780097961 ; P Val = 0.0
    red_2 -- blue_2 : Rsq = 0.9899952411651611 ; P Val = 0.0
    red_2 -- green_2 : Rsq = 0.9931454062461853 ; P Val = 0.0
    green_3 -- blue_3 : Rsq = 0.9962819814682007 ; P Val = 0.0
    red_3 -- blue_3 : Rsq = 0.9932787418365479 ; P Val = 0.0
    red_3 -- green_3 : Rsq = 0.9970407485961914 ; P Val = 0.0
    swir2_3 -- red_3 : Rsq = 0.9821245074272156 ; P Val = 0.0
    swir2_3 -- swir1_3 : Rsq = 0.9829241633415222 ; P Val = 0.0
    '''

    all_attr = main_attr + all_attr

    list_dicts = Handler(infile).read_from_csv(return_dicts=True)

    count_good_samp = 0
    out_list = []
    for i, samp_dict in enumerate(list_dicts):

        bad_data_flag = False
        out_dict = {}

        # all_unq, unq_counts = np.unique(list(samp_dict.values()), return_counts=True)
        # if any(list(val_count >= same_val_count for val_count in unq_counts)):
        #     bad_data_flag = True
        #     continue

        # else:
        for attr in all_attr:
            if attr in samp_dict:
                if samp_dict[attr] != nodata:
                    out_dict[attr] = samp_dict[attr]
                else:
                    print(samp_dict[attr])
                    bad_data_flag = True
                    break

        if bad_data_flag:
            continue
        else:
            wkt = samp_dict['geom']
            if intersecting(zone, wkt):

                print('Sample {} of {}'.format(str(i + 1), str(len(list_dicts))))
                out_list.append(out_dict)
                count_good_samp += 1

    Handler(outfile).file_delete()
    Handler(outfile).write_to_csv(out_list, outfile=outfile)

    print('Good samples: {} out of total {}'.format(str(count_good_samp),
                                                    str(len(list_dicts))))

    print('Written: {}'.format(outfile))

